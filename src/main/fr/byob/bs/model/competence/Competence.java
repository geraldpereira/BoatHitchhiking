package fr.byob.bs.model.competence;

// Generated 27 févr. 2009 10:34:58 by Hibernate Tools 3.2.2.GA

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;

/**
 * CompAutre generated by hbm2java
 */
@Entity
@org.hibernate.annotations.Entity(mutable = false)
@Table(name = "COMPETENCE")
public class Competence implements java.io.Serializable, Cloneable {

	private static final long serialVersionUID = 1L;

	@Id
	@Column(name = "ID_COMPETENCE", unique = true, nullable = false)
	private Long idCompetence;

	@Column(name = "LIBELLE", nullable = false, length = 30)
	@NotNull
	@Length(max = 30)
	private String libelle;

	@ManyToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	@JoinColumn(name = "TYPE_COMPETENCE", nullable = false)
	private TypeCompetence typeCompetence;

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "competence")
	private Set<CompetenceUtilisateur> competencesUtilisateur = new HashSet<CompetenceUtilisateur>(
			0);

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "competence")
	private Set<CompetenceAppreciee> competencesAppreciees = new HashSet<CompetenceAppreciee>(
			0);

	public Competence() {
	}

	public Competence(String libelle) {
		this.libelle = libelle;
	}

	public Competence(String libelle,
			Set<CompetenceUtilisateur> competencesUtilisateur,
			Set<CompetenceAppreciee> competencesAppreciees) {
		this.libelle = libelle;
		this.competencesUtilisateur = competencesUtilisateur;
		this.competencesAppreciees = competencesAppreciees;
	}

	@Override
	public Competence clone() {
		Competence clone = new Competence();
		clone.setIdCompetence(getIdCompetence().longValue());
		clone.setLibelle("" + getLibelle());
		return clone;
	}

	public Long getIdCompetence() {
		return this.idCompetence;
	}

	public void setIdCompetence(Long idCompetence) {
		this.idCompetence = idCompetence;
	}

	public String getLibelle() {
		return this.libelle;
	}

	public void setLibelle(String libelle) {
		this.libelle = libelle;
	}

	public Set<CompetenceUtilisateur> getCompetencesUsers() {
		return this.competencesUtilisateur;
	}

	public void setCompetencesUsers(
			Set<CompetenceUtilisateur> competencesUtilisateur) {
		this.competencesUtilisateur = competencesUtilisateur;
	}

	public Set<CompetenceAppreciee> getCompetencesAppreciees() {
		return this.competencesAppreciees;
	}

	public void setCompetencesAppreciees(
			Set<CompetenceAppreciee> competencesAppreciees) {
		this.competencesAppreciees = competencesAppreciees;
	}

	public TypeCompetence getTypeCompetence() {
		return typeCompetence;
	}

	public void setTypeCompetence(TypeCompetence typeCompetence) {
		this.typeCompetence = typeCompetence;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((idCompetence == null) ? 0 : idCompetence.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Competence other = (Competence) obj;
		if (idCompetence == null) {
			if (other.idCompetence != null)
				return false;
		} else if (!idCompetence.equals(other.idCompetence))
			return false;
		return true;
	}

}
