package fr.byob.bs.model.bateau;
// Generated 27 févr. 2009 10:34:58 by Hibernate Tools 3.2.2.GA

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

import fr.byob.bs.model.Photo;

/**
 * Photo generated by hbm2java
 */
@Entity
@Table(name = "PHOTO_BATEAU")
public class PhotoBateau extends Photo implements java.io.Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "idPhotoBateauGenerator")
	@GenericGenerator(name = "idPhotoBateauGenerator", strategy = "org.hibernate.id.enhanced.SequenceStyleGenerator", parameters = { @Parameter(name = "initial_value", value = "100"),
			@Parameter(name = "sequence_name", value = "id_photo_bateau_sequence") })
	@Column(name = "ID_PHOTO", unique = true, nullable = false)
	private Long idPhoto;
	
	@ManyToOne(/* cascade = CascadeType.ALL, */fetch = FetchType.LAZY)
	@JoinColumn(name="BATEAU", nullable= true)
	private Bateau bateau;
	
	public PhotoBateau() {
	}

	public PhotoBateau(String path) {
		super(path);
	}

	public PhotoBateau(Bateau bateau) {
		super();
		this.bateau = bateau;
	}
	
	private PhotoBateau(Long idPhoto, String path, boolean tmp, String fullPath, String filePath) {
		super(path, tmp, fullPath, filePath);
		this.idPhoto = idPhoto;
	}

	public Bateau getBateau() {
		return this.bateau;
	}

	public void setBateau(Bateau bateau) {
		this.bateau = bateau;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((idPhoto == null) ? 0 : idPhoto.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PhotoBateau other = (PhotoBateau) obj;
		if (idPhoto == null) {
			if (other.idPhoto != null)
				return false;
		} else if (!idPhoto.equals(other.idPhoto))
			return false;
		return true;
	}

	public Long getIdPhoto() {
		return this.idPhoto;
	}

	public void setIdPhoto(Long idPhoto) {
		this.idPhoto = idPhoto;
	}

	@Override
	public String toString() {
		return "[" + this.idPhoto + "," + this.getFullPath() + "," + this.getPath() + "," + this.getFullPath() + "," + this.getFilePath() + "]";
	}
	
	@Override
	public Photo clone() {
		return new PhotoBateau(getIdPhoto(), getPath(), getIsTMP(), getFullPath(), getFilePath());
	}

}
