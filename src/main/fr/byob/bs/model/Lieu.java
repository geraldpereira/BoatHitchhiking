package fr.byob.bs.model;
// Generated 27 févr. 2009 10:34:58 by Hibernate Tools 3.2.2.GA

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Index;
import org.hibernate.annotations.NamedQueries;
import org.hibernate.annotations.NamedQuery;
import org.hibernate.annotations.Parameter;
import org.hibernate.annotations.Table;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;
import org.hibernate.validator.Pattern;


/**
 * Lieu generated by hbm2java
 */
@NamedQueries( { @NamedQuery(name = "lieu.findByPaysAndVille", query = "select lieu from Lieu lieu where lower(lieu.ville) like lower(:ville) and lieu.pays = :pays and lieu.idLieu <> :placeDummy"),
		@NamedQuery(name = "lieu.findByPays", query = "select lieu from Lieu lieu where lieu.ville is null and lieu.pays = :pays and lieu.idLieu <> :placeDummy") })
@Entity
@javax.persistence.Table(name="LIEU")
@org.hibernate.annotations.Entity(mutable = false)
@Table( appliesTo = "LIEU",indexes = { @Index(name="idx_ville_pays", columnNames = { "VILLE", "PAYS" } ) })
public class Lieu implements java.io.Serializable, Cloneable {

	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "idLieuGenerator")
	@GenericGenerator(name = "idLieuGenerator", strategy = "org.hibernate.id.enhanced.SequenceStyleGenerator", parameters = { @Parameter(name = "initial_value", value = "100"),
			@Parameter(name = "sequence_name", value = "id_lieu_sequence") })
	@Column(name = "ID_LIEU", unique = true, nullable = false)
	private Long idLieu;
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "PAYS", nullable = false)
	@NotNull
	private Pays pays;
	
	@Column(name = "VILLE", nullable = true, length = 50)
	// @NotNull
	@Length(max = 50)
	@Pattern(regex="\\p{L}*([- ]\\p{L}*)*",message = "#{messages['validator.lettreEtMoins']}")
	private String ville;
	
	@Column(name = "LATITUDE", nullable = true)
	private Float latitude;

	@Column(name = "LONGITUDE", nullable = true)
	private Float longitude;

	public Lieu() {
	}

	public Lieu(Pays pays, String ville) {
		this.pays = pays;
		this.ville = ville;
		org.hibernate.id.enhanced.SequenceStyleGenerator gen;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((idLieu == null) ? 0 : idLieu.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Lieu other = (Lieu) obj;
		if (idLieu == null) {
			if (other.idLieu != null)
				return false;
		} else if (!idLieu.equals(other.idLieu))
			return false;
		return true;
	}
	
	@Override
	public Lieu clone(){
		Lieu retour = new Lieu();
		retour.setPays(this.pays);
		retour.setVille(this.ville);
		retour.setLatitude(this.latitude);
		retour.setLongitude(this.longitude);
		return retour;
	}
	
	@Override
	public String toString() {
		return "[" + (pays == null ? "pays null" : pays.getLibelle()) + ","
				+ ville + "]";
	}
	
	public Long getIdLieu() {
		return this.idLieu;
	}

	public void setIdLieu(Long idLieu) {
		this.idLieu = idLieu;
	}
	
	public Pays getPays() {
		return this.pays;
	}

	public void setPays(Pays pays) {
		this.pays = pays;
	}

	public String getVille() {
		return this.ville;
	}

	public void setVille(String ville) {
		this.ville = ville;
	}

	public Float getLatitude() {
		return this.latitude;
	}

	public void setLatitude(Float latitude) {
		this.latitude = latitude;
	}

	public Float getLongitude() {
		return this.longitude;
	}

	public void setLongitude(Float longitude) {
		this.longitude = longitude;
	}
	
	public boolean isRenderableOnMap() {
		return (this.longitude != null || this.latitude != null);
	}
	
}
